version: "3.9"

services:
  celery:
    build:
      context: ../server/
      target: production
      dockerfile: Dockerfile
    restart: always
    command: celery -A core worker -l info
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - DJANGO_SECRET_KEY=dj4ng0_sup3r_s3cr3t_k3y
      - DJANGO_DEBUG=1
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - REDIS_BACKEND=redis://redis:6379/0
    volumes:
      - ../server/:/usr/src/app/
    depends_on:
      - db
      - redis
      - backend
      - rabbitmq

  backend:
    container_name: CONTAINERNAME
    build:
      context: ../server/
      target: production
      dockerfile: Dockerfile
    restart: always
    command: uvicorn app.asgi:application --host 0.0.0.0 --port 8000 --workers 4 --log-level debug --reload
    expose:
      - 8000
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - DJANGO_SECRET_KEY=dj4ng0_sup3r_s3cr3t_k3y
      - DJANGO_DEBUG=1
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - REDIS_BACKEND=redis://redis:6379/0
    volumes:
      - static_volume:/usr/src/app/staticfiles
      - media_volume:/usr/src/app/mediafiles
    depends_on:
      - redis
      - db
      - rabbitmq

  frontend:
    container_name: nextjs_container
    build:
      context: ../frontend/
      target: production
      dockerfile: Dockerfile
    restart: always
    image: nextjs_container
    volumes:
      - nextjs_build:/app/build
    ports:
      - "3000:3000"

  nginx:
    build:
      context: ../nginx/
      dockerfile: Dockerfile
    restart: always
    ports:
      - ${NGINX_PORT}:8080
    volumes:
      - nextjs_build:/var/www/nextjs
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  nextjs_build:
  static_volume:
  media_volume:

